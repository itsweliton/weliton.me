---
const { coverUrl, coverAlt } = Astro.props;
import { Image } from 'astro:assets';
import { getImage } from "astro:assets";
const optimizedBackground = await getImage({src: coverUrl, format: 'webp'});

---
<div class="mb-6">
  <div class="album" data-cover-url={coverUrl}>
		<div class="cover">
			<Image class="image" src={coverUrl} alt={coverAlt} width={150} height={150}/>
		</div>
		<div class="vinyl">
			<div class="vinyl-cover" style={`background-image: url(${optimizedBackground.src});`}></div>
		</div>
	</div>
</div>

<style lang="scss">
.album {
	--album-size: 150px; /* Base size */
	--vinyl-size: 130px; /* Base vinyl size */
	--border-radius: 3px; /* Border radius */
	--cover-translate: -10px; /* Translation for hover */
	--cover-rotate: -2deg; /* Rotation for hover */
	--vinyl-translate: 50%; /* Vinyl translation for hover */
	--vinyl-rotate: 360deg; /* Vinyl rotation for hover */

	position: relative;
	width: var(--album-size);
	height: var(--album-size);

	.cover {
		position: relative;
		width: 100%;
		height: 100%;
		border-radius: var(--border-radius);
		overflow: hidden;
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
		z-index: 2;
		transition: transform 0.5s ease-in-out; 

		.image {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}

		&::before {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 10%;
			background: linear-gradient(to bottom, rgba(255, 255, 255, 0.4) 1%, transparent 50%);
			pointer-events: none;
			z-index: 3;
		}

		&::after {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: 
				linear-gradient(to top, rgba(0, 0, 0, 0.5), transparent 4%),
				linear-gradient(225deg, 
					rgba(162, 162, 162, 0.1) 0%, 
					rgba(162, 162, 162, 0.2) 4%,
					rgba(255, 255, 255, 0.2) 6%,
					rgba(255, 255, 255, 0.6) 7%,
					rgba(255, 255, 255, 0.2) 7%,
					rgba(218, 218, 218, 0.04) 7%,
					transparent 6%),
				linear-gradient(45deg, 
					rgba(14, 14, 14, 0.7),
					rgba(0, 0, 0, 0.5) 0%, 
					rgba(0, 0, 0, 0.2) 4%,
					rgba(14, 14, 14, 0.2) 6%,
					rgba(255, 255, 255, 0.3) 7%,
					rgba(218, 218, 218, 0.4) 7%,
					transparent 8%);
			pointer-events: none;
			z-index: 3;
		}
	}

	.vinyl {
		position: absolute;
		top: 10px;
		right: 0;
		width: var(--vinyl-size);
		height: var(--vinyl-size);
		border-radius: 50%;
		background: 
			conic-gradient(from 50deg at 50% 50%, 
				transparent 46%, 
				rgba(255, 255, 255, 0.1) 48%, 
				rgba(255, 255, 255, 0.15) 51%, 
				transparent 56%),
			conic-gradient(from 225deg at 50% 50%, 
				transparent 46%, 
				rgba(255, 255, 255, 0.1) 48%, 
				rgba(255, 255, 255, 0.15) 51%, 
				transparent 56%),
			repeating-radial-gradient(circle, 
				rgba(120, 120, 120, 0.1) 0%, 
				rgba(192, 192, 192, 0.01) 1px, 
				transparent 1px, 
				transparent 4px),
			black;
		display: flex;
		justify-content: center;
		align-items: center;
		transform: translateX(0) rotate(270deg);
		transition: transform 0.5s ease-in-out;
		box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
		z-index: 1;

		.vinyl-cover {
			width: calc(var(--vinyl-size) / 2.8);
			height: calc(var(--vinyl-size) / 2.8);
			background-size: cover;
			background-position: center;
			border-radius: 50%;
			box-shadow: 0 0 0 5px black;
		}
	}

	&:hover .cover {
		transform: translateX(var(--cover-translate)) rotate(var(--cover-rotate));
	}

	&:hover .vinyl {
		transform: translateX(var(--vinyl-translate)) rotate(var(--vinyl-rotate));
	}

	&.small {
		// margin-right: 70px;
		--album-size: 150px; /* Reduced size */
		--vinyl-size: 130px; /* Reduced vinyl size */
		--border-radius: 2px; /* Adjusted border radius */
		--cover-translate: -5px; /* Adjusted translation for hover */
		--cover-rotate: -1deg; /* Adjusted rotation for hover */
		--vinyl-translate: 50%; /* Adjusted vinyl translation for hover */
		--vinyl-rotate: 360deg; /* Same vinyl rotation */
	}
}
</style>
